@page "/customers/edit"
@using Microsoft.EntityFrameworkCore
@using CarRentalManagement.Domain
@inject IDbContextFactory<CarRentalManagement.Data.CarRentalManagementContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Customer</h2>
<hr />
@if (Customer is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Customer" OnValidSubmit="UpdateCustomer" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert" />
                <input type="hidden" name="Customer.Id" value="@Customer.Id" />
                <div class="mb-3">
                    <label for="drivinglicense" class="form-label">DrivingLicense:</label>
                    <InputText id="drivinglicense" @bind-Value="Customer.DrivingLicense" class="form-control" />
                    <ValidationMessage For="() => Customer.DrivingLicense" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="address" class="form-label">Address:</label>
                    <InputText id="address" @bind-Value="Customer.Address" class="form-control" />
                    <ValidationMessage For="() => Customer.Address" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="contactnumber" class="form-label">ContactNumber:</label>
                    <InputText id="contactnumber" @bind-Value="Customer.ContactNumber" class="form-control" />
                    <ValidationMessage For="() => Customer.ContactNumber" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="emailaddress" class="form-label">EmailAddress:</label>
                    <InputText id="emailaddress" @bind-Value="Customer.EmailAddress" class="form-control" />
                    <ValidationMessage For="() => Customer.EmailAddress" class="text-danger" />
                </div>
                <div class="mb-3" hidden>
                    <label for="datecreated" class="form-label">DateCreated:</label>
                    <InputDate id="datecreated" @bind-Value="Customer.DateCreated" class="form-control" />
                    <ValidationMessage For="() => Customer.DateCreated" class="text-danger" />
                </div>
                <div class="mb-3" hidden>
                    <label for="dateupdated" class="form-label">DateUpdated:</label>
                    <InputDate id="dateupdated" @bind-Value="Customer.DateUpdated" class="form-control" />
                    <ValidationMessage For="() => Customer.DateUpdated" class="text-danger" />
                </div>
                <div class="mb-3" hidden>
                    <label for="createdby" class="form-label">CreatedBy:</label>
                    <InputText id="createdby" @bind-Value="Customer.CreatedBy" class="form-control" />
                    <ValidationMessage For="() => Customer.CreatedBy" class="text-danger" />
                </div>
                <div class="mb-3" hidden>
                    <label for="updatedby" class="form-label">UpdatedBy:</label>
                    <InputText id="updatedby" @bind-Value="Customer.UpdatedBy" class="form-control" />
                    <ValidationMessage For="() => Customer.UpdatedBy" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/customers">Back to List</a>
</div>

@code {
    @inject AuthenticationStateProvider authenticationStateProvider

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    private Customer? Customer { get; set; }
    private string userId = "System";

    protected override async Task OnInitializedAsync()
    {
        // Fetch the authenticated user's ID
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userIdClaim = user.FindFirst("userId");

        if (userIdClaim != null)
        {
            userId = userIdClaim.Value;
            using var context = DbFactory.CreateDbContext();
            Customer = await context.Customer.FirstOrDefaultAsync(c => c.Id == Id);
        }
    }

    private async Task UpdateCustomer()
    {
        if (Customer != null)
        {
            using var context = DbFactory.CreateDbContext();

            // Set UpdatedBy and DateUpdated
            Customer.UpdatedBy = userId;
            Customer.DateUpdated = DateTime.Now;

            // Attach and set the entity state to Modified
            context.Attach(Customer);
            context.Entry(Customer).State = EntityState.Modified;

            // Ensure all fields are updated
            await context.SaveChangesAsync();

            // Redirect to the customer list page
            NavigationManager.NavigateTo("/customers");
        }
    }

    private bool CustomerExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Customer.Any(e => e.Id == id);
    }
}
